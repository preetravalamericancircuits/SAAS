version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: saas_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: saas_db
      POSTGRES_USER: saas_user
      POSTGRES_PASSWORD: saas_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - saas_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saas_user -d saas_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    container_name: saas_backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://saas_user:saas_password@postgres:5432/saas_db
      DEBUG: "true"
      SECRET_KEY: your-secret-key-here
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
    networks:
      - saas_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build: ./frontend
    container_name: saas_frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NODE_ENV: production
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - saas_network
    command: sh -c "npm install && npm run build && npm run start"

  redis:
    image: redis:7-alpine
    container_name: saas_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - saas_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: saas_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/public:/usr/share/nginx/html:ro
    depends_on:
      - frontend
      - backend
    networks:
      - saas_network

networks:
  saas_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
